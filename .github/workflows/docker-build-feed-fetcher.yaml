---
name: 'Feed Fetcher: Build, Test and Push'

on:
  push:
    branches:
      - 'main'
    paths:
      - 'feed-fetcher/**'
      - '.github/workflows/docker-build-feed-fetcher.yaml'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'feed-fetcher/**'
      - '.github/workflows/docker-build-feed-fetcher.yaml'
  schedule:
    # re-run monthly to keep image fresh with upstream base images
    - cron: '0 12 15 * *'

jobs:
  # Building a test image #######################################################################
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout git repo
        uses: actions/checkout@v4.1.1

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v5
        with:
          file: ./feed-fetcher/build/Dockerfile
          push: true
          tags: ghcr.io/vladislav-chunikhin/sport-news/feed-fetcher:${{ github.run_id }}
          build-args: |
            GOMOD_PATH=./feed-fetcher/go.mod
            PROJECT_PATH=./feed-fetcher/
            OUTPUT_BINARY=build/output/main
            APP_VERSION=test
            APP_NAME=feed-fetcher
            BUILD_DIR=./cmd/app
            APP_PORT=8080
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Unit tests #######################################################################
  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v4.1.1

      - name: Run unit tests
        run: make test-unit
        working-directory: feed-fetcher

      - name: Upload code coverage
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage
          path: ./feed-fetcher/cover.out

      - name: Generate coverage status
        run: |
          cat coverage.out | grep -v "mock" > coverage.cleaned.out
          TOTAL=`go tool cover -func=coverage.cleaned.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          if (( $(echo "${TOTAL} > ${COVER_MIN}" |bc -l) )); then 
            STATE=success; 
          else 
            STATE=failure;
          fi
          curl -X POST "https://${GITHUB_CREDS}@${REPO_API}" -d "{\"state\":\"${STATE}\",\"description\":\"total cover ${TOTAL}%, min ${COVER_MIN}%\",\"context\": \"quality gate\"}"

