---
name: 'Feed Fetcher: Build, Test and Push'

on:
  push:
    branches:
      - 'main'
    paths:
      - 'feed-fetcher/**'
      - '.github/workflows/docker-build-feed-fetcher.yaml'
  pull_request:
    branches:
      - 'main'
    paths:
      - 'feed-fetcher/**'
      - '.github/workflows/docker-build-feed-fetcher.yaml'
  schedule:
    # re-run monthly to keep image fresh with upstream base images
    - cron: '0 12 15 * *'

jobs:
  # Building a test image #######################################################################
  build-test-image:
    name: Build Image for Testing
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io

    steps:

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout git repo
        uses: actions/checkout@v4.1.1

      - name: Build and Push to GHCR
        uses: docker/build-push-action@v5
        with:
          file: ./feed-fetcher/build/Dockerfile
          push: true
          tags: ghcr.io/vladislav-chunikhin/sport-news/feed-fetcher:${{ github.run_id }}
          build-args: |
            GOMOD_PATH=./feed-fetcher/go.mod
            PROJECT_PATH=./feed-fetcher/
            OUTPUT_BINARY=build/output/main
            APP_VERSION=test
            APP_NAME=feed-fetcher
            BUILD_DIR=./cmd/app
            APP_PORT=8080
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Unit tests #######################################################################
  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v4.1.1

      - name: Set up Go
        uses: actions/setup-go@v4.1.0
        with:
          go-version: '1.21'

      - name: Run unit tests
        run: make test-unit
        working-directory: feed-fetcher

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./feed-fetcher/cover.out
          verbose: true
          fail_ci_if_error: true
          flags: feed-fetcher

  # Test Deployment in Kubernetes #######################################################################
  test-k3d:
    name: Test Deployment in Kubernetes
    needs: [ build-test-image ]
    runs-on: ubuntu-latest

    permissions:
      packages: read

    steps:

      - name: Checkout git repo
        uses: actions/checkout@v4.1.1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: AbsaOSS/k3d-action@v2
        with:
          cluster-name: "test-cluster-1"
          args: >-
            --agents 1
            --no-lb
            --k3s-arg "--no-deploy=traefik,servicelb,metrics-server@server:*"

      - name: Smoke test deployment in k3d Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-server=https://ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}
          export TEST_IMAGE=ghcr.io/vladislav-chunikhin/sport-news/feed-fetcher:"$GITHUB_RUN_ID"
          export RELATIVE_PATH=./feed-fetcher/deployment/k8s-test/
          ./feed-fetcher/deployment/k8s-test/k8s-apply.sh
          kubectl rollout -n feed-fetcher status deployment feed-fetcher
          curl --fail localhost:31001/health/ready

  # Build Final Image #######################################################################
  build-push-final-image:
    name: Build Final Image
    needs: [ unit-test, test-k3d ]
    runs-on: ubuntu-latest

    permissions:
      packages: write # needed to push docker image to ghcr.io
      pull-requests: write # needed to create and update comments in PRs

    steps:

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ghcr.io registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Metadata for Final Image Build
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/feed-fetcher
            ghcr.io/vladislav-chunikhin/sport-news/feed-fetcher
          flavor: |
            latest=false
          tags: |
            type=raw,value=gha-${{ github.run_id }}

      - name: Docker Build and Push to GHCR and Docker Hub
        uses: docker/build-push-action@v5
        with:
          file: ./feed-fetcher/build/Dockerfile
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            GOMOD_PATH=./feed-fetcher/go.mod
            PROJECT_PATH=./feed-fetcher/
            OUTPUT_BINARY=build/output/main
            APP_VERSION=prod
            APP_NAME=feed-fetcher
            BUILD_DIR=./cmd/app
            APP_PORT=8080
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7

